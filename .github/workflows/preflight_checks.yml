name: Preflight Checks (DB + Kroger)

on:
  workflow_dispatch: {}   # run manually

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install psycopg[binary] requests

      - name: DB smoke test
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          python - << 'PY'
import os, psycopg
url = os.environ["SUPABASE_DB_URL"]
safe = url.split("@")[1].split("?")[0] if "@" in url else "<hidden>"
print(f"Connecting to: {safe}")
with psycopg.connect(url, autocommit=True) as conn:
    with conn.cursor() as cur:
        cur.execute("select current_date, current_user")
        print("Basic query:", cur.fetchone())
        # Verify tables exist and are readable
        for t in ("stores","products","daily_prices","request_log"):
            cur.execute(f"select to_regclass('{t}')")
            print(f"Table {t} exists?:", cur.fetchone()[0] is not None)
        # Optional sample counts (kept small)
        for t in ("stores","products"):
            cur.execute(f"select count(*) from {t}")
            print(f"Count {t}:", cur.fetchone()[0])
print("DB connection OK")
PY

      - name: Kroger token test
        env:
          KROGER_CLIENT_ID: ${{ secrets.KROGER_CLIENT_ID }}
          KROGER_CLIENT_SECRET: ${{ secrets.KROGER_CLIENT_SECRET }}
        run: |
          python - << 'PY'
import os, base64, requests
cid = os.environ["KROGER_CLIENT_ID"]
cs  = os.environ["KROGER_CLIENT_SECRET"]
auth = base64.b64encode(f"{cid}:{cs}".encode()).decode()
headers = {"Authorization": f"Basic {auth}",
           "Content-Type": "application/x-www-form-urlencoded"}
data = {"grant_type":"client_credentials", "scope":"product.compact"}
r = requests.post("https://api.kroger.com/v1/connect/oauth2/token",
                  headers=headers, data=data, timeout=20)
print("HTTP status:", r.status_code)
r.raise_for_status()
j = r.json()
print("Received token_type:", j.get("token_type"), "| expires_in (s):", j.get("expires_in"))
print("Kroger auth OK")
PY
